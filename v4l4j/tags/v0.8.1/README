Video4Linux4Java (v4l4j) is a GPL'd java package providing a simple interface
to capture frames  from Video4Linux devices. It consists of:
- a v4l library (libvideo), which is a C wrapper library around the V4L API,
- a set of java classes that provide access to the libvideo API, and
- a JNI stub, which fills in the gap between JAVA and libvideo.

FEATURES:
- Captured frames handed out in a ByteBuffer object. Frames are handed in either
  in raw format or converted to JPEG, RGB24, BGR24, YUV420 or YVU420.
- Single frame or stream capture
- Access to all V4L video source controls, even those accessible
  only through private ioctls, which are exposed as (pseudo-) controls.
  See TestedHardware in the libvideo directory for a list of detected drivers
  and exported private ioctls

REQUIREMENTS:
v4l4j requires the following:
- a supported V4L video source (webcam, capture card, tuner card).
- Sun JAVA JDK 1.6 (it wont compile with earlier versions). Some users have
  successfully used v4l4j with OpenJDK, although it has not officially been
  tested.
- the development files of libjpeg, as well as libjpeg itself
- standard build tools (make, gcc, ld) & headers (libc)
- Apache Ant

COMPILING:
To compile the JNI library and java classes, run "ant all" in the top-level
directory. This will first compile libvideo and the JNI code, and then link both
of these to produce the JNI library libv4l4j. It will then compile the java 
classes and pack them in a JAR file. Both the JNI library libv4l4j.so and the
JAR file v4l4j.jar are copied in the top-level directory.

INSTALLING:
In order to use the v4l4j package from your java application, you must do
two things:
FIRST, make sure JNI library libv4l4j.so can be loaded by the JVM. This is done
by EITHER:
- installing libv4l4j.so in the JRE lib directory. This is achieved by running
  "ant install" as root in the top-level directory. It can be
  uninstalled with "ant uninstall" as root later on. If you are on a
  64-bit platform, use "ant install64" and "ant uninstall64" instead, 
OR
- setting the shell variable LD_LIBRARY_PATH to point to the directory where
  libv4l4j.so resides before running your program. By default, libv4l4j.so
  is created in the v4l4j/ directory. For example:
  LD_LIBRARY_PATH=path/to/libv4l4j_dir java my.package.MyApp
  The same can be achieved by setting the java.library.path property using:
  "-Djava.library.path=path/to/libv4l4j_dir" when invoking the JVM.

SECOND, make sure v4l4j.jar is in your application's classpath. If you used
"ant install(64)" in the previous step, v4l4j.jar will be copied to 
/usr/share/java by default.

TESTING:
Three example applications are shipped with v4l4j:
- The first one simply captures frames for 10 seconds and print the frame rate.
  Run it with "ant test-fps"
- The second one displays the video stream & video controls in a window. Run it
  with "ant test-gui".
- The last one displays information about the video device. Run it with 
  "ant deviceInfo"  

By default, tests will use /dev/video0 (assumed to be a webcam) as the video 
device, and capture resolution will be set to 640x480. You can change any of 
these settings by editing the values at the bottom of "build.properties",
or provide those values on the ant command line (-Dtest.device=..., to change
the device file, -Dtest.width=... the change the width, -Dtest.height=... for 
the height and so on). 

DEBUGGING:
You can compile v4l4j to produce extra debug output, useful to troubleshoot
issues, with "ant clean all-debug". If you have already installed v4l4j (with
"ant install") then you MUST uninstall it with "ant uninstall" first, otherwise
the previous jar file & JNI library (without debug statements) will take
precedence over the new ones. 

CONTACT:
Feedback is is greatly appreciated to expand the list of platforms and video
devices v4l4j has been successfully tested with. Feedback, issues and queries 
can be emailed to v4l4j@googlegroups.com.

