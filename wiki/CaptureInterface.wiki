#summary this page presents the Capture interface of libvideo
#sidebar LibvideoApiSideBar

= The Capture interface =
This interface provides methods to setup capture parameters, apply them and obtain images from a video device. It is represented by a `struct capture_device`, which contains the following members:
{{{
//all the fields in the following structure are read only
struct capture_device {
	struct mmap *mmap;  //do not touch
	int palette;  //which image format is used
	int width;   //captured frame width
	int height;  //captured frame width
	int std;   //v4l standard 
	int channel;  //channel number (0 for webcams)
	int imagesize;  //in bytes
	int tuner_nb;  //the index of the tuner associated with
                       //this capture_device, -1 if not tuner input
	struct capture_actions *actions;  //function pointers
	int is_native;  //this field is meaningful only with v4l2.
			//for v4l1, it is always set to 1.
                        //it specifies whether or not the palette
                        //is native, ie, whether it is produced by the device
                        //or it is converted by libvideo to a convienience format
	int real_v4l1_palette;  //do not touch
	struct convert_data* convert;	//do not touch
};
}}}
All the fields in this structure are read-only. Their values can be changed by using appropriate functions contained in the `actions` member (see below). A pointer to a fully initialised `struct capture_device` is returned by the `init_capture_device(struct video_device *vdev, int w, int h, int ch, int s, int nb_buf)` function like this:
{{{
struct capture_device *cap = init_capture_device(video_dev, 640, 480,0, 0, 4);
//check returned value
}}}
This method allocates the structure, setups its members and returns a pointer to the structure, or NULL if video_device is NULL. w is the desired capture width, h the desired capture height, ch is the input channel, s the video standard (WEBCAM, PAL, SECAM or NTSC) anb nb_buf is the number of buffers to be allocated (4 is an appropriate value) for capture. At this stage, the structure is initialised with the values given in arguments. It does not yet reflect the values that will be used for capture.

The structure must be released when finished with:
{{{
free_capture_device(cap);
}}}

Video capture involves the following steps:
 # apply capture parameters
 # intialise capture resources
 # start the capture
 # get the buffer with the latest frame
 # do something with the frame
 # put the buffer back
 # stop the capture
 # free resources

Steps 4,5 & 6 are repeated as many times as required to produce a video stream. Each of these steps is carried out using a specific method found in the `struct capture_actions` present in the `actions` member of the `struct capture_device`.

== Apply capture parameters ==
This step allows the application to specify a list of image formats it wishes to use. This is done using the `set_cap_param` member:
{{{
int fmts[]={RGB24;YUV420};
int fmts_nb=2, ret;
ret = cap->actions->set_cap_param(video_dev, fmts, fmts_nb);
//check return value and take appropriate action
}}}
`fmts` is an integer array of `fmts_nb` libvideo palette indexes. Palette indexes are marcos listed in `libvideo.h`. If `fmts` can be set to NULL, libvideo will pick the first image format supported by the device.

After calling this method, all the members in `struct capture_device` will be set to their final value, reflecting the capture parameters that will be used:
 * the capture width is in `cap->width`, the height in `cap->height`,
 * the image format is `cap->palette`,
 * the video standard is `cap->std`,
 * the video channel is `cap->channel`
 * the image size is `cap->imagesize` (this value is only meaningful for uncompressed image formats. For compressed formats, the image size is returned when fetching the frame buffer)
This method returns 0 if successful, LIBVIDEO_ERR_FORMAT (no supplied image formats could be used), LIBVIDEO_ERR_STD (the supplied standard could not be used), LIBVIDEO_ERR_CHANNEL (the supplied channel is invalid), LIBVIDEO_ERR_CROP (error applying cropping parameters) or LIBVIDEO_ERR_NOCAPS (error checking capabilities).

Also, if supported, the desired frame rate can be set using the following:
{{{
int num = 1, denom = 30, ret;
ret = cap->actions->set_frame_interval(video_dev, num, denom);
//check return value and take appropriate action
}}}
set_frame_interval() will apply the given frame interval, specified as numerator and denominator integers. The frame rate (in frame per second) FPS = 1 / frame_interval. So  the above frame interval is equivalent to 30 frames per second. set_frame_interval returns 0 if successful, LIBVIDEO_ERR_FORMAT (if the given frame interval is not supported), LIBVIDEO_ERR_IOCTL (setting frame interval is not supported).

Similarly, getting the current frame interval is done using:
{{{
int num, denom,  ret;
ret = cap->actions->get_frame_interval(video_dev, &num, &denom);
//check return value and take appropriate action
}}}
get_frame_interval() will return the current frame interval. It returns 0 if successful or LIBVIDEO_ERR_IOCTL (getting frame interval is not supported).

== Initialise capture resources ==
This is done using:
{{{
int ret = cap->actions->init_capture(video_dev);
//check return value and take appropriate action
}}}
This function returns 0 if everything went fine, LIBVIDEO_ERR_REQ_MMAP if there was an error negotiating mmap params or LIBVIDEO_ERR_INVALID_BUF_NB if the number of requested buffers is incorrect. 

If this method is successful (returned value of 0), resources MUST be released when finished as explained in the [#Free_resources Free resources] section, even if some or all of the next steps fail.

== Start the capture ==
The hardware must be instructed to start capturing frames with:
{{{
int ret = cap->actions->start_capture(video_dev);
//check return value and take appropriate action
}}}
This method returns 0 if the capture was successfully started, LIBVIDEO_ERR_IOCTL otherwise. If successful, the capture MUST be stopped when finished as explained in the [#Stop_the_capture Stop capture] section, even if some or all of the next steps fail.

== Get frame buffers ==
Images can now be obtained using:
{{{
int len;
unsigned int *buffer;
buffer = cap->actions->dequeue_buffer(video_dev, &len);
//check returned value
}}}
This method returns a pointer to a buffer containing the latest frame of length `len`, or NULL if there was an error getting the frame. If this method is successful (returned value not NULL), the buffer MUST be returned back to the driver when done, as explained in the next section.

== Return buffers ==
After processing, the buffer must be returned with:
{{{
cap->actions->enqueue_buffer(video_dev);
}}}
This function must be called after each successful call to `dequeue_buffer`.

== Stop the capture ==
The capture is stopped using:
{{{
int ret = cap->actions->stop_capture(video_dev);
//check return value
}}}
This method returns 0 if the capture is stopped, LIBVIDEO_ERR_IOCTL otherwise. At this point, the capture can be started again using `cap->actions->start_capture`. This function must be called if `start_capture()` was successful.

== Free resources ==
When finished, the capture resources must be freed using:
{{{
cap->actions->free_capture(video_dev);
}}}
This method must be called if `init_capture()` was successful.

== Capture example ==
The following is adapted from one of the test programs shipped with libvideo called test-capture. It merely follows the steps mentioned above:
 * acquire the video device interface
 * acquire the capture interface
 * apply capture parameters
 * initialise the capture
 * start the capture
 * repeat the following 10 times:
   * get buffer with latest frame
   * process it
   * put it back
 * stop capture
 * release capture resources
 * release the capture interface
 * release the video device interface
{{{
//make sure you #include "libvideo.h" & #include "palettes.h"

//pointer to video device interface
struct video_device *v;
//pointer to capture interface
struct capture_device *c;
//pointer to buffer containing last captured frame
void *d;
//size of last captured frame
int size;
//video standard for webcams
int std=WEBCAM;
//input channel for webcam
int channel=0;
//desired capture width
int width=640;
//desired capture height
int height=480;
//image format we want
int fmt=RGB24;
//how many frames captured so far
int count=0;

printf("Trying %dx%d standard %d, channel %d\n",width,height,std, channel);
printf("Trying image format %s (%d)\n",libvideo_palettes[fmt].name, fmt);

//acquire the video device interface
v = open_device(argv[1]);
if(v==NULL){
    printf("Error opening device %s", argv[1]);
    return -1;
}

//acquire the capture interface
c = init_capture_device(v, width, height ,channel, std,2);
if(c==NULL) {
    printf("Error initialising device.\n");
    close_device(v);
    return -1;
}

//apply capture parameters
if((*c->actions->set_cap_param)(v, &fmt, 1)!=0){
    free_capture_device(v);
    close_device(v);
    printf("Cant set capture parameters\n");
    return -1;
}

printf("Capturing from %s at %dx%d.\n", v->file, c->width,c->height);
printf("Image format %s, size: %d\n", libvideo_palettes[c->palette].name, c->imagesize);

//init capture
if((*c->actions->init_capture)(v)!=0){
    free_capture_device(v);
    close_device(v);
    printf("Cant initialise capture ");
    return -1;
}

//start the capture
if((*c->actions->start_capture)(v)!=0){
    (*c->actions->free_capture)(v);
    free_capture_device(v);
    close_device(v);
    printf("Cant start capture");
    return -1;
}

//capture 10 frames
while(count++<10) {
    //get latest frame 
    if((d = (*c->actions->dequeue_buffer)(v, &size)) != NULL) {
        //do something useful with frame at 'd' of size 'size'

        //when finished put the buffer back
        //Put buffer
        (*c->actions->enqueue_buffer)(v);
    } else {
        printf("Cant get buffer ");
	break;
    }
}


//stop capture
if((*c->actions->stop_capture)(v)!=0)
    printf("Error stopping capture\n");

//release capture resources
(*c->actions->free_capture)(v);

//release capture interface
free_capture_device(v);

//release video device interface
close_device(v);
}}}