#summary this page presents the Query interface of libvideo
#sidebar LibvideoApiSideBar

= The Query interface =
This interface provides useful information about a video device. An application should check some important characteristics available through this interface (such as supported image formats) before attempting to acquire and use other interfaces.
The query interface is represented by a `struct device_info` structure:
{{{
#define NAME_FIELD_LENGTH 			32 + 1
struct device_info {
	int nb_inputs;  //the number of video inputs on this device
	struct video_input_info *inputs; //an array of 'nb_inputs' structures, see below
	int nb_palettes;  //the number of supported image formats
	struct palette_info *palettes; //an array of 'nb_palettes' structure, see below
	char name[NAME_FIELD_LENGTH];  //the name of this video device
};
}}}
Information about a video input is contained in a `struct video_input_info`:
{{{
struct video_input_info {
#define INPUT_TYPE_TUNER			1
#define INPUT_TYPE_CAMERA			2
	int type;  //this input is either a tuner or a camera input
	int nb_stds; //how many video standards are supported by this input
	int *supported_stds; //an array of 'nb_stds' video standards (int)
                             //video standards macros are defined in libvideo.h:
                             //WEBCAM, PAL, NTSC, SECAM
	struct tuner_info *tuner; //contains information about the tuner associated with
                                  //this input (if type==INPUT_TYPE_TUNER), NULL otherwise
	char name[NAME_FIELD_LENGTH];  //the name of this input
	int index;  //this input's index
};
}}}


Information about an image format is encapsulated in a `struct palette_info`:
{{{

/*
 * a palette (or image format) can be either raw or converted.
 * A raw palette is a palette produced by the driver natively.
 * A converted palette is a palette which is converted by libvideo from
 * a raw palette
 */
struct palette_info{
	//this palette's index
	int index;

	//if raw_palettes is not NULL, then this palette is a converted palette and
	//raw_palettes contains an array of indexes of raw palettes. It is used
	//for V4L2 only. The last element in the array is -1
	//if raw_palettes is NULL, this palette is raw, and size_type and
	//(continuous or discrete) are valid (check value of size_type).
	//If raw_palettes is not NULL, then
	//size_type==FRAME_SIZE_UNSUPPORTED, continuous and discrete and not valid.
	int *raw_palettes;

	//the type of frame sizes
	enum frame_size_types size_type;

	//if size_type==FRAME_SIZE_CONTINUOUS, then only the continuous member
	//of this union is valid, and points to a single
	//struct frame_size_continuous
	//if size_type==FRAME_SIZE_DISCRETE, then only the discrete member
	//of this union is valid, and points to an array of
	//struct frame_size_discrete. The last element in the array has its members
	//(width and height) set to 0.
	//if size_type==FRAME_SIZE_UNSUPPORTED, then none of the two members are
	//valid
	union {
		struct frame_size_continuous *continuous;
		struct frame_size_discrete *discrete;
	};
};
}}}

libvideo can convert native image formats (image formats produce by the video device) into convenience formats RGB24, BGR24, YUV420 & YVU420. This is internally accomplished by libv4l_convert. When checking supported image formats, both native and converted formats are reported by libvideo. The application can make the difference between a native and a converted format by checking the `raw_palette` member: if it is set to `NULL` then it is a native format. Otherwise, it points to an integer array which lists the native formats that can be converted.


Also a `struct palette_info` contains information on the supported captures resolutions and frame intervals for the image format it describes. If the image format is native, the member `size_type` indicates whether the supported resolutions are reported as a list of discrete Width,Height pairs (size_type=FRAME_SIZE_DISCRETE), or as minimum/maximum/step values for both width and height (size_type=FRAME_SIZE_CONTINUOUS). if size_type=FRAME_SIZE_UNSUPPORTED, then no resolution information could be obtained form the driver.
Both discrete and continuous frame sizes may contain information about supported frame intervals in the corresponding members.

{{{
/*
 * Frame intervals
 */

struct frame_intv_discrete{
	unsigned int numerator;
	unsigned int denominator;
};

struct frame_intv_continuous{
	struct frame_intv_discrete min;
	struct frame_intv_discrete max;
	struct frame_intv_discrete step;
};

enum frame_intv_types{
	FRAME_INTV_UNSUPPORTED=0,
	FRAME_INTV_DISCRETE,
	FRAME_INTV_CONTINUOUS
};


struct frame_size_discrete {
	int width;
	int height;

	//the type of frame frame intervals (V4L2 only)
	enum frame_intv_types interval_type;

	//if interval_type==FRAME_INTV_CONTINUOUS, then only the continuous member
	//of the union is valid and points to a single struct frame_intv_continuous
	//if interval_type==FRAME_INTV_DISCRETE, then only the discrete member
	//of the union is valid and points to an array of struct
	//frame_intv_discrete. The last element in the array has its members (num
	//& denom) set to 0.
	//if interval_type==FRAME_INTV_UNSUPPORTED, then none of the two members are
	//valid
	union {
		struct frame_intv_continuous *continuous;
		struct frame_intv_discrete *discrete;
	} intv;
};

struct frame_size_continuous {
	int min_width;
	int max_width;
	int step_width;
	int min_height;
	int max_height;
	int step_height;

	//the type of frame frame intervals (V4L2 only)
	//for the minimum and maximum resolutions
	//(min_width X min_height) and (max_width X max_height)
	enum frame_intv_types interval_type_min_res;
	enum frame_intv_types interval_type_max_res;

	//if interval_type==FRAME_INTV_CONTINUOUS, then only the continuous member
	//of the union is valid and points to a single struct frame_intv_continuous
	//if interval_type==FRAME_INTV_DISCRETE, then only the discrete member
	//of the union is valid and points to an array of struct
	//frame_intv_discrete. The last element in the array has its members (num
	//& denom) set to 0.
	//if interval_type==FRAME_INTV_UNSUPPORTED, then none of the two members are
	//valid
	union {
		struct frame_intv_continuous *continuous;
		struct frame_intv_discrete *discrete;
	} intv_min_res;
	union {
		struct frame_intv_continuous *continuous;
		struct frame_intv_discrete *discrete;
	} intv_max_res;
};

enum frame_size_types{
	FRAME_SIZE_UNSUPPORTED=0,
	FRAME_SIZE_DISCRETE,
	FRAME_SIZE_CONTINUOUS
};

}}}


Information about a tuner is contained in a `struct tuner_info`:
{{{
struct tuner_info {
#define RADIO_TYPE					1
#define TV_TYPE						2
	int type; //RADIO_TYPE or TV_TYPE
	//In units of 62.5 Khz if unit==MHZ_UNIT
	//of 62.5Hz if unit==KHZ_UNIT
	unsigned long rangelow;
	unsigned long rangehigh;
#define KHZ_UNIT					1
#define MHZ_UNIT					2
	int unit;
	int rssi;  //received signal strength indicator
	char name[NAME_FIELD_LENGTH]; //the name of this tuner
	int index; //the index of this tuner
};
}}}

==Getting information==
To acquire the query interface, use the `get_device_info()` function:
{{{
struct device_info * d = get_device_info(video_dev);
//check returned value
}}}
This method returns a pointer to a `struct device_info` detailed above, or NULL if there was an error gathering information about the device. This can happen with some webcam if there is already another application using the camera. This behaviour is driver-dependent.

The query interface must be release with:
{{{
release_device_info(video_dev);
}}}

Assuming the query interface has been acquired, the convenience method `print_device_info()` dumps the contents of the query interface to stdout in an easy-to-read format. The code for this method is presented in the next section.

==Example==
The following code prints out information contained in the query interface.
{{{
int j,k;
struct video_device *v = open_device("/dev/video0");
struct device_info *i = get_device_info(video_dev);
if(i!=NULL){
	printf("============================================\n\n");
	printf("Printing device info\n\n");
	printf("Device name: %s\n",i->name);
	printf("Device file: %s\n",v->file);
	printf("Supported image formats (Name - Index):\n");
	for(j=0; j<i->nb_palettes; j++){
		printf("\t%s (%d)", libvideo_palettes[i->palettes[j].index].name,
				i->palettes[j].index);
		if(i->palettes[j].raw_palettes!=NULL){
			k=-1;
			printf(" ( converted from ");
			while(i->palettes[j].raw_palettes[++k]!=-1)
				printf("%s (%d) - ",libvideo_palettes[i->palettes[j].raw_palettes[k]].name,
						i->palettes[j].raw_palettes[k]
				);
			printf(" )\n");
		} else {
			printf("\n");

			if(i->palettes[j].size_type==FRAME_SIZE_CONTINUOUS){
				printf("\t\tWidth (min/max/step): %d / %d / %d\n",
						i->palettes[j].continuous->min_width,
						i->palettes[j].continuous->max_width,
						i->palettes[j].continuous->step_width
				);
				printf("\t\tHeight (min/max/step): %d / %d / %d\n",
						i->palettes[j].continuous->min_height,
						i->palettes[j].continuous->max_height,
						i->palettes[j].continuous->step_height
				);
			}else if(i->palettes[j].size_type==FRAME_SIZE_DISCRETE){
				k = -1;
				while(i->palettes[j].discrete[++k].width!=0)
					printf("\t\t%d x %d\n",
							i->palettes[j].discrete[k].width,
							i->palettes[j].discrete[k].height
					);

			}else
				printf("\t\tFrame size enumeration not supported\n");
		}
	}


	printf("Inputs:\n");
	for(j=0; j<i->nb_inputs; j++){
		printf("\tName: %s\n", i->inputs[j].name);
		printf("\tNumber: %d\n", i->inputs[j].index);
		printf("\tType: %d (%s)\n", i->inputs[j].type,
				i->inputs[j].type==INPUT_TYPE_TUNER ? "Tuner" : "Camera");
		printf("\tSupported standards:\n");
		for(k=0; k<i->inputs[j].nb_stds; k++)
			printf("\t\t%d (%s)\n",i->inputs[j].supported_stds[k],
					i->inputs[j].supported_stds[k]==WEBCAM?"Webcam":
					i->inputs[j].supported_stds[k]==PAL?"PAL":
					i->inputs[j].supported_stds[k]==SECAM?"SECAM":"NTSC");
		if(i->inputs[j].tuner!=NULL){
			printf("\tTuner\n");
			printf("\t\tName: %s\n",i->inputs[j].tuner->name);
			printf("\t\tIndex: %d\n", i->inputs[j].tuner->index);
			printf("\t\tRange low: %lu\n", i->inputs[j].tuner->rangelow);
			printf("\t\tRange high: %lu\n", i->inputs[j].tuner->rangehigh);
			printf("\t\tUnit: %d (%s)\n", i->inputs[j].tuner->unit,
					i->inputs[j].tuner->unit==KHZ_UNIT?"KHz":"MHz");
			printf("\t\tType: %d (%s)\n", i->inputs[j].tuner->type,
					i->inputs[j].tuner->type==RADIO_TYPE?"Radio":"TV");

		}
	}
}
release_device_info(video_dev);
close_device(video_dev);
}}}